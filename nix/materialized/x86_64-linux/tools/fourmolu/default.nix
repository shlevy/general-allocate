{
  pkgs = hackage:
    {
      packages = {
        Cabal-syntax.revision = import ./cabal-files/Cabal-syntax.nix;
        bytestring.revision = (((hackage.bytestring)."0.11.4.0").revisions).default;
        yaml.revision = import ./cabal-files/yaml.nix;
        yaml.flags.no-examples = true;
        yaml.flags.no-exe = true;
        dlist.revision = import ./cabal-files/dlist.nix;
        dlist.flags.werror = false;
        colour.revision = import ./cabal-files/colour.nix;
        exceptions.revision = (((hackage.exceptions)."0.10.4").revisions).default;
        directory.revision = (((hackage.directory)."1.3.6.2").revisions).default;
        th-lift-instances.revision = import ./cabal-files/th-lift-instances.nix;
        vector-stream.revision = import ./cabal-files/vector-stream.nix;
        filepath.revision = (((hackage.filepath)."1.4.2.2").revisions).default;
        mtl.revision = (((hackage.mtl)."2.2.2").revisions).default;
        ghc-bignum.revision = (((hackage.ghc-bignum)."1.2").revisions).default;
        megaparsec.revision = import ./cabal-files/megaparsec.nix;
        megaparsec.flags.dev = false;
        tagged.revision = import ./cabal-files/tagged.nix;
        tagged.flags.deepseq = true;
        tagged.flags.transformers = true;
        data-fix.revision = import ./cabal-files/data-fix.nix;
        ghc-prim.revision = (((hackage.ghc-prim)."0.8.0").revisions).default;
        unliftio-core.revision = import ./cabal-files/unliftio-core.nix;
        parser-combinators.revision = import ./cabal-files/parser-combinators.nix;
        parser-combinators.flags.dev = false;
        parsec.revision = (((hackage.parsec)."3.1.15.0").revisions).default;
        bifunctors.revision = import ./cabal-files/bifunctors.nix;
        bifunctors.flags.tagged = true;
        bifunctors.flags.semigroups = true;
        integer-logarithms.revision = import ./cabal-files/integer-logarithms.nix;
        integer-logarithms.flags.check-bounds = false;
        integer-logarithms.flags.integer-gmp = true;
        strict.revision = import ./cabal-files/strict.nix;
        strict.flags.assoc = true;
        base-compat.revision = import ./cabal-files/base-compat.nix;
        gitrev.revision = import ./cabal-files/gitrev.nix;
        aeson.revision = import ./cabal-files/aeson.nix;
        aeson.flags.ordered-keymap = true;
        aeson.flags.cffi = false;
        splitmix.revision = import ./cabal-files/splitmix.nix;
        splitmix.flags.optimised-mixer = false;
        assoc.revision = import ./cabal-files/assoc.nix;
        containers.revision = (((hackage.containers)."0.6.5.1").revisions).default;
        stm.revision = (((hackage.stm)."2.5.0.2").revisions).default;
        libyaml.revision = import ./cabal-files/libyaml.nix;
        libyaml.flags.system-libyaml = false;
        libyaml.flags.no-unicode = false;
        alex.revision = import ./cabal-files/alex.nix;
        OneTuple.revision = import ./cabal-files/OneTuple.nix;
        base.revision = (((hackage.base)."4.16.4.0").revisions).default;
        time.revision = (((hackage.time)."1.11.1.1").revisions).default;
        resourcet.revision = import ./cabal-files/resourcet.nix;
        split.revision = import ./cabal-files/split.nix;
        uuid-types.revision = import ./cabal-files/uuid-types.nix;
        case-insensitive.revision = import ./cabal-files/case-insensitive.nix;
        th-abstraction.revision = import ./cabal-files/th-abstraction.nix;
        semigroupoids.revision = import ./cabal-files/semigroupoids.nix;
        semigroupoids.flags.tagged = true;
        semigroupoids.flags.containers = true;
        semigroupoids.flags.distributive = true;
        semigroupoids.flags.unordered-containers = true;
        semigroupoids.flags.contravariant = true;
        semigroupoids.flags.comonad = true;
        optparse-applicative.revision = import ./cabal-files/optparse-applicative.nix;
        optparse-applicative.flags.process = true;
        MemoTrie.revision = import ./cabal-files/MemoTrie.nix;
        MemoTrie.flags.examples = false;
        generically.revision = import ./cabal-files/generically.nix;
        base-orphans.revision = import ./cabal-files/base-orphans.nix;
        witherable.revision = import ./cabal-files/witherable.nix;
        random.revision = import ./cabal-files/random.nix;
        primitive.revision = import ./cabal-files/primitive.nix;
        deepseq.revision = (((hackage.deepseq)."1.4.6.1").revisions).default;
        newtype-generics.revision = import ./cabal-files/newtype-generics.nix;
        conduit.revision = import ./cabal-files/conduit.nix;
        happy.revision = import ./cabal-files/happy.nix;
        distributive.revision = import ./cabal-files/distributive.nix;
        distributive.flags.tagged = true;
        distributive.flags.semigroups = true;
        rts.revision = (((hackage.rts)."1.0.2").revisions).default;
        template-haskell.revision = (((hackage.template-haskell)."2.18.0.0").revisions).default;
        mono-traversable.revision = import ./cabal-files/mono-traversable.nix;
        binary.revision = (((hackage.binary)."0.8.9.0").revisions).default;
        indexed-traversable-instances.revision = import ./cabal-files/indexed-traversable-instances.nix;
        ansi-wl-pprint.revision = import ./cabal-files/ansi-wl-pprint.nix;
        ansi-wl-pprint.flags.example = false;
        ansi-terminal.revision = import ./cabal-files/ansi-terminal.nix;
        ansi-terminal.flags.example = false;
        ansi-terminal.flags.win32-2-13-1 = true;
        vector-algorithms.revision = import ./cabal-files/vector-algorithms.nix;
        vector-algorithms.flags.internalchecks = false;
        vector-algorithms.flags.llvm = false;
        vector-algorithms.flags.properties = true;
        vector-algorithms.flags.boundschecks = true;
        vector-algorithms.flags.unsafechecks = false;
        vector-algorithms.flags.bench = true;
        text-short.revision = import ./cabal-files/text-short.nix;
        text-short.flags.asserts = false;
        transformers-compat.revision = import ./cabal-files/transformers-compat.nix;
        transformers-compat.flags.two = false;
        transformers-compat.flags.mtl = true;
        transformers-compat.flags.four = false;
        transformers-compat.flags.five = false;
        transformers-compat.flags.five-three = true;
        transformers-compat.flags.three = false;
        transformers-compat.flags.generic-deriving = true;
        time-compat.revision = import ./cabal-files/time-compat.nix;
        time-compat.flags.old-locale = false;
        process.revision = (((hackage.process)."1.6.16.0").revisions).default;
        unix.revision = (((hackage.unix)."2.7.2.2").revisions).default;
        data-array-byte.revision = import ./cabal-files/data-array-byte.nix;
        th-lift.revision = import ./cabal-files/th-lift.nix;
        transformers.revision = (((hackage.transformers)."0.5.6.2").revisions).default;
        indexed-traversable.revision = import ./cabal-files/indexed-traversable.nix;
        these.revision = import ./cabal-files/these.nix;
        these.flags.assoc = true;
        unordered-containers.revision = import ./cabal-files/unordered-containers.nix;
        unordered-containers.flags.debug = false;
        QuickCheck.revision = import ./cabal-files/QuickCheck.nix;
        QuickCheck.flags.old-random = false;
        QuickCheck.flags.templatehaskell = true;
        Diff.revision = import ./cabal-files/Diff.nix;
        syb.revision = import ./cabal-files/syb.nix;
        contravariant.revision = import ./cabal-files/contravariant.nix;
        contravariant.flags.tagged = true;
        contravariant.flags.semigroups = true;
        contravariant.flags.statevar = true;
        bitvec.revision = import ./cabal-files/bitvec.nix;
        bitvec.flags.libgmp = false;
        base-compat-batteries.revision = import ./cabal-files/base-compat-batteries.nix;
        scientific.revision = import ./cabal-files/scientific.nix;
        scientific.flags.bytestring-builder = false;
        scientific.flags.integer-simple = false;
        text.revision = (((hackage.text)."1.2.5.0").revisions).default;
        ghc-lib-parser.revision = import ./cabal-files/ghc-lib-parser.nix;
        StateVar.revision = import ./cabal-files/StateVar.nix;
        attoparsec.revision = import ./cabal-files/attoparsec.nix;
        attoparsec.flags.developer = false;
        array.revision = (((hackage.array)."0.5.4.0").revisions).default;
        ghc-boot-th.revision = (((hackage.ghc-boot-th)."9.2.6").revisions).default;
        vector.revision = import ./cabal-files/vector.nix;
        vector.flags.internalchecks = false;
        vector.flags.wall = false;
        vector.flags.boundschecks = true;
        vector.flags.unsafechecks = false;
        comonad.revision = import ./cabal-files/comonad.nix;
        comonad.flags.containers = true;
        comonad.flags.distributive = true;
        comonad.flags.indexed-traversable = true;
        semialign.revision = import ./cabal-files/semialign.nix;
        semialign.flags.semigroupoids = true;
        pretty.revision = (((hackage.pretty)."1.1.3.6").revisions).default;
        hashable.revision = import ./cabal-files/hashable.nix;
        hashable.flags.random-initial-seed = false;
        hashable.flags.integer-gmp = true;
        };
      compiler = {
        version = "9.2.6";
        nix-name = "ghc926";
        packages = {
          "pretty" = "1.1.3.6";
          "text" = "1.2.5.0";
          "array" = "0.5.4.0";
          "mtl" = "2.2.2";
          "parsec" = "3.1.15.0";
          "bytestring" = "0.11.4.0";
          "filepath" = "1.4.2.2";
          "stm" = "2.5.0.2";
          "ghc-prim" = "0.8.0";
          "ghc-boot-th" = "9.2.6";
          "base" = "4.16.4.0";
          "time" = "1.11.1.1";
          "process" = "1.6.16.0";
          "ghc-bignum" = "1.2";
          "directory" = "1.3.6.2";
          "exceptions" = "0.10.4";
          "rts" = "1.0.2";
          "transformers" = "0.5.6.2";
          "template-haskell" = "2.18.0.0";
          "deepseq" = "1.4.6.1";
          "unix" = "2.7.2.2";
          "binary" = "0.8.9.0";
          "containers" = "0.6.5.1";
          };
        };
      };
  extras = hackage:
    { packages = { fourmolu = ./.plan.nix/fourmolu.nix; }; };
  modules = [
    ({ lib, ... }:
      {
        packages = {
          "fourmolu" = {
            flags = {
              "dev" = lib.mkOverride 900 false;
              "fixity-th" = lib.mkOverride 900 true;
              };
            };
          };
        })
    ({ lib, ... }:
      {
        packages = {
          "Cabal-syntax".components.library.planned = lib.mkOverride 900 true;
          "ansi-terminal".components.library.planned = lib.mkOverride 900 true;
          "base-orphans".components.library.planned = lib.mkOverride 900 true;
          "megaparsec".components.library.planned = lib.mkOverride 900 true;
          "these".components.library.planned = lib.mkOverride 900 true;
          "resourcet".components.library.planned = lib.mkOverride 900 true;
          "filepath".components.library.planned = lib.mkOverride 900 true;
          "newtype-generics".components.library.planned = lib.mkOverride 900 true;
          "distributive".components.library.planned = lib.mkOverride 900 true;
          "pretty".components.library.planned = lib.mkOverride 900 true;
          "gitrev".components.library.planned = lib.mkOverride 900 true;
          "bytestring".components.library.planned = lib.mkOverride 900 true;
          "mono-traversable".components.library.planned = lib.mkOverride 900 true;
          "strict".components.library.planned = lib.mkOverride 900 true;
          "comonad".components.library.planned = lib.mkOverride 900 true;
          "data-fix".components.library.planned = lib.mkOverride 900 true;
          "fourmolu".components.exes."fourmolu".planned = lib.mkOverride 900 true;
          "exceptions".components.library.planned = lib.mkOverride 900 true;
          "dlist".components.library.planned = lib.mkOverride 900 true;
          "ghc-prim".components.library.planned = lib.mkOverride 900 true;
          "array".components.library.planned = lib.mkOverride 900 true;
          "binary".components.library.planned = lib.mkOverride 900 true;
          "ghc-boot-th".components.library.planned = lib.mkOverride 900 true;
          "scientific".components.library.planned = lib.mkOverride 900 true;
          "splitmix".components.library.planned = lib.mkOverride 900 true;
          "rts".components.library.planned = lib.mkOverride 900 true;
          "tagged".components.library.planned = lib.mkOverride 900 true;
          "unix".components.library.planned = lib.mkOverride 900 true;
          "parser-combinators".components.library.planned = lib.mkOverride 900 true;
          "vector".components.library.planned = lib.mkOverride 900 true;
          "indexed-traversable-instances".components.library.planned = lib.mkOverride 900 true;
          "directory".components.library.planned = lib.mkOverride 900 true;
          "happy".components.exes."happy".planned = lib.mkOverride 900 true;
          "Diff".components.library.planned = lib.mkOverride 900 true;
          "time".components.library.planned = lib.mkOverride 900 true;
          "StateVar".components.library.planned = lib.mkOverride 900 true;
          "case-insensitive".components.library.planned = lib.mkOverride 900 true;
          "vector-algorithms".components.library.planned = lib.mkOverride 900 true;
          "bitvec".components.library.planned = lib.mkOverride 900 true;
          "unliftio-core".components.library.planned = lib.mkOverride 900 true;
          "ghc-bignum".components.library.planned = lib.mkOverride 900 true;
          "yaml".components.library.planned = lib.mkOverride 900 true;
          "indexed-traversable".components.library.planned = lib.mkOverride 900 true;
          "ghc-lib-parser".components.library.planned = lib.mkOverride 900 true;
          "base-compat-batteries".components.library.planned = lib.mkOverride 900 true;
          "split".components.library.planned = lib.mkOverride 900 true;
          "contravariant".components.library.planned = lib.mkOverride 900 true;
          "syb".components.library.planned = lib.mkOverride 900 true;
          "text-short".components.library.planned = lib.mkOverride 900 true;
          "data-array-byte".components.library.planned = lib.mkOverride 900 true;
          "assoc".components.library.planned = lib.mkOverride 900 true;
          "process".components.library.planned = lib.mkOverride 900 true;
          "template-haskell".components.library.planned = lib.mkOverride 900 true;
          "th-lift".components.library.planned = lib.mkOverride 900 true;
          "libyaml".components.library.planned = lib.mkOverride 900 true;
          "stm".components.library.planned = lib.mkOverride 900 true;
          "witherable".components.library.planned = lib.mkOverride 900 true;
          "generically".components.library.planned = lib.mkOverride 900 true;
          "alex".components.exes."alex".planned = lib.mkOverride 900 true;
          "semialign".components.library.planned = lib.mkOverride 900 true;
          "QuickCheck".components.library.planned = lib.mkOverride 900 true;
          "ansi-wl-pprint".components.library.planned = lib.mkOverride 900 true;
          "uuid-types".components.library.planned = lib.mkOverride 900 true;
          "semigroupoids".components.library.planned = lib.mkOverride 900 true;
          "fourmolu".components.library.planned = lib.mkOverride 900 true;
          "attoparsec".components.library.planned = lib.mkOverride 900 true;
          "mtl".components.library.planned = lib.mkOverride 900 true;
          "th-abstraction".components.library.planned = lib.mkOverride 900 true;
          "attoparsec".components.sublibs."attoparsec-internal".planned = lib.mkOverride 900 true;
          "transformers".components.library.planned = lib.mkOverride 900 true;
          "OneTuple".components.library.planned = lib.mkOverride 900 true;
          "th-lift-instances".components.library.planned = lib.mkOverride 900 true;
          "parsec".components.library.planned = lib.mkOverride 900 true;
          "deepseq".components.library.planned = lib.mkOverride 900 true;
          "primitive".components.library.planned = lib.mkOverride 900 true;
          "conduit".components.library.planned = lib.mkOverride 900 true;
          "text".components.library.planned = lib.mkOverride 900 true;
          "bifunctors".components.library.planned = lib.mkOverride 900 true;
          "unordered-containers".components.library.planned = lib.mkOverride 900 true;
          "random".components.library.planned = lib.mkOverride 900 true;
          "base".components.library.planned = lib.mkOverride 900 true;
          "vector-stream".components.library.planned = lib.mkOverride 900 true;
          "integer-logarithms".components.library.planned = lib.mkOverride 900 true;
          "transformers-compat".components.library.planned = lib.mkOverride 900 true;
          "colour".components.library.planned = lib.mkOverride 900 true;
          "containers".components.library.planned = lib.mkOverride 900 true;
          "time-compat".components.library.planned = lib.mkOverride 900 true;
          "optparse-applicative".components.library.planned = lib.mkOverride 900 true;
          "aeson".components.library.planned = lib.mkOverride 900 true;
          "base-compat".components.library.planned = lib.mkOverride 900 true;
          "hashable".components.library.planned = lib.mkOverride 900 true;
          "MemoTrie".components.library.planned = lib.mkOverride 900 true;
          };
        })
    ];
  }